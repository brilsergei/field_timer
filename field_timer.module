<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_libraries_info().
 */
function field_timer_libraries_info() {
  return array(
    'county' => array(
      'name' => t('County'),
      'vendor url' => 'http://www.egrappler.com/free-jquery-count-down-plugin-county/',
      'download url' => 'http://www.egrappler.com/free-jquery-count-down-plugin-county/',
      'version' => '1.0',
      'files' => array(
        'js' => array(
          'js/county.js',
        ),
        'css' => array(
          'css/county.css',
        ),
      ),
    ),
    'jquery.countdown' => array(
      'name' => t('jQuery Countdown'),
      'vendor url' => 'http://keith-wood.name/countdown.html',
      'download url' => 'http://keith-wood.name/countdown.html',
      'version arguments' => array(
        'file'  => 'jquery.countdown.js',
        'pattern' => '/Countdown for jQuery v(1.6.[0-3])/',
        'lines' => 2,
      ),
      'files' => array(
        'js' => array(
          'jquery.countdown.min.js',
        ),
        'css' => array(
          'jquery.countdown.css',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function field_timer_field_info() {
  return array(
    'field_timer' => array(
      'label' => t('Timer Field'),
      'description' => t('Timer or countdown.'),
      'settings' => array(),
      'instance_settings' => array(
        // Used only for jQuery Countdown plugin.
        'jquery-countdown' => array(
          'description' => '',
          'expiryText' => '',
          'expiryUrl' => '',
        ),
      ),
      'default_widget' => 'field_timer_simple_date',
      'default_formatter' => 'field_timer_text',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function field_timer_field_widget_info() {
  return array(
    'field_timer_simple_date' => array(
      'label' => t('Date Popup'),
      'field types' => array('field_timer'),
      'settings' => array(),
      'weight' => -1,
    ),
    'field_timer_entity_property_select' => array(
      'label' => t('Entity Property (Select List)'),
      'description' => t("Allow set an entity's property value as the target date."),
      'field types' => array('field_timer'),
      'settings' => array(),
      'weight' => 0,
    ),
    'field_timer_entity_property_radio' => array(
      'label' => t('Entity Property (Radio Buttons)'),
      'description' => t("Allow set an entity's property value as the target date."),
      'field types' => array('field_timer'),
      'settings' => array(),
      'weight' => 0,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_timer_field_widget_form(&$form, &$form_state, $field, $instance,
        $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {
    case 'field_timer_simple_date':
      $default_value = NULL;
      // Default value from database is timestamp, default value set by admin
      // at field configuration page is formatted date string.
      if (isset($items[$delta]['timestamp'])) {
        if (is_numeric($items[$delta]['timestamp'])) {
          $default_value = date('Y-m-d H:i:s', $items[$delta]['timestamp']);
        }
        else {
          $default_value = $items[$delta]['timestamp'];
        }
      }
      $widget = array(
        '#type' => 'date_popup',
        '#title' => $element['#title'],
        '#default_value' => $default_value,
      );
      $element['timestamp'] = $widget;
      break;

    case 'field_timer_entity_property_select':
      $options = field_timer_entity_properties($instance['entity_type']);
      $widget = array(
        '#type' => 'select',
        '#options' => $options,
        '#multiple' => FALSE,
        '#title' => $element['#title'],
        '#default_value' => isset($items[$delta]['entity_property_name']) ? $items[$delta]['entity_property_name'] : 0,
        '#description' => t('Choose an entity property which will be used as the target date.'),
        '#empty_value' => 0,
      );
      $element['entity_property_name'] = $widget;
      break;

    case 'field_timer_entity_property_radio':
      $options = field_timer_entity_properties($instance['entity_type']);
      $widget = array(
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => isset($items[$delta]['entity_property_name']) ? $items[$delta]['entity_property_name'] : 0,
        '#description' => t('Choose an entity property which will be used as the target date.'),
      );
      $element['entity_property_name'] = $widget;
      $element['#type'] = 'fieldset';

  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function field_timer_field_formatter_info() {
  $formatters = array(
    'field_timer_text' => array(
      'label' => t('Text'),
      'description' => t('Simple text timer and countdown.'),
      'field types' => array('field_timer'),
      'settings' => array(
        'type' => 'auto',
        'granularity' => 2,
      ),
    ),
  );

  $library = libraries_detect('county');
  if ($library && !empty($library['installed'])) {
    $formatters['field_timer_county'] = array(
      'label' => t('County'),
      'description' => t('Use County jQuery plugin to display countdown.'),
      'field types' => array('field_timer'),
      'settings' => array(
        'animation' => 'fade',
        'speed' => 500,
        'theme' => 'blue',
        'background' => '',
        'reflection' => 1,
        'reflectionOpacity' => 0.2,
      ),
    );
  }

  $library = libraries_detect('jquery.countdown');
  if ($library && !empty($library['installed'])) {
    $formatters['field_timer_jquery_countdown'] = array(
      'label' => t('jQuery Countdown'),
      'description' => t('Use jQuery Countdown plugin to display countdown and timer.'),
      'field types' => array('field_timer'),
      'settings' => array(
        'type' => 'auto',
        'regional' => 'en',
        'format' => 'dHMS',
        'layout' => '',
        'compact' => 0,
        'significant' => 0,
        'timeSeparator' => ':',
      ),
    );
        
    $formatters['field_timer_jquery_countdown_led'] = array(
      'label' => 'jQuery Countdown LED',
      'description' => t('Display timer and countdown as a LED.'),
      'field types' => array('field_timer'),
      'settings' => array(
        'type' => 'auto',
        'max_count_of_days' => 2,
        'display_days' => 1,
        'display_hours' => 1,
        'display_minutes' => 1,
        'display_seconds' => 1,
      ),
    );
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function field_timer_field_formatter_view($entity_type, $entity, $field, $instance,
        $langcode, $items, $display) {

  module_load_include('inc', 'field_timer', 'includes/field_timer.formatters');
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'field_timer_text':
      return _field_timer_text_formatter($items, $settings);

    case 'field_timer_county':
      return _field_timer_jquery_county_formatter($items, $settings, $entity_type, $entity);

    case 'field_timer_jquery_countdown':
      return _field_timer_countdown_formatter($items, $settings, $entity_type, $entity, $instance);
      
    case 'field_timer_jquery_countdown_led':
      return _field_timer_jquery_countdown_led_formatter($items, $settings, $entity_type, $entity, $instance);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_timer_field_is_empty($item, $field) {
  if (empty($item['timestamp']) && empty ($item['entity_property_name'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_presave().
 */
function field_timer_field_presave($entity_type, $entity, $field, $instance,
        $langcode, &$items) {

  // Date popup widget return date as formatted string. We need to convert it to
  // timestamp.
  if ($field['type'] == 'field_timer') {
    foreach ($items as $delta => $item) {
      if (!empty($item['timestamp'])) {
        $timestamp = strtotime($item['timestamp']);
        if ($timestamp) {
          $items[$delta]['timestamp'] = $timestamp;
        }
      }
    }
  }
}

/**
 * Implements hook_field_load().
 */
function field_timer_field_load($entity_type, $entities, $field, $instances,
        $langcode, &$items, $age) {

  // Set timestamp for field item if an entity property used as target/end date.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if (empty($item['timestamp']) && !empty($item['entity_property_name'])) {
        if (isset($entity->{$item['entity_property_name']})) {
          $items[$id][$delta]['timestamp'] = $entity->{$item['entity_property_name']};
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_timer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  switch ($display['type']) {
    case 'field_timer_text':
      $types = array(
        'auto' => t('Auto'),
        'timer' => t('Timer'),
        'countdown' => t('Countdown'),
      );
      $summary[] = t('Type: %type', array('%type' => $types[$settings['type']]));
      $summary[] = t('Granularity: %granularity', array('%granularity' => $settings['granularity']));

      return implode('<br/>', $summary);

    case 'field_timer_county':
      $animations = array(
        'fade' => t('Fade'),
        'scroll' => t('Scroll'),
      );
      $summary[] = t('Animation: %animation', array('%animation' => $animations[$settings['animation']]));
      $summary[] = t('Speed: %speed', array('%speed' => $settings['speed'] . 'ms'));
      $themes = array(
        'black' => t('Black'),
        'gray' => t('Gray'),
        'red' => t('Red'),
        'blue' => t('Blue'),
      );
      $summary[] = t('Theme: %theme', array('%theme' => $themes[$settings['theme']]));

      $summary[] = t('Background: %css', array('%css' => $settings['background']));

      $summary[] = t('Reflection: %state', array(
        '%state' => $settings['reflection'] ? 'Enabled' : 'Disabled',
      ));

      if ($settings['reflection']) {
        $summary[] = t('Reflection opacity: %opacity', array(
            '%opacity' => $settings['reflectionOpacity'],
        ));
      }

      return implode($summary, '<br />');

    case 'field_timer_jquery_countdown':
      $types = array(
        'auto' => t('Auto'),
        'timer' => t('Timer'),
        'countdown' => t('Countdown'),
      );
      $summary[] = t('Type: %type', array('%type' => $types[$settings['type']]));

      $regions = _field_timer_jquery_countdown_regions();
      $summary[] = t('Region: %regional', array('%regional' => $regions[$settings['regional']]));

      $summary[] = t('Format: %format', array('%format' => $settings['format']));
      $summary[] = t('Layout: %layout', array('%layout' => $settings['layout']));
      $summary[] = t('Compact: %compact', array('%compact' => $settings['compact'] ? t('Yes') : t('No')));
      $summary[] = t('Significant: %significant', array('%significant' => $settings['significant']));
      $summary[] = t('Time separator: %timeSeparator', array('%timeSeparator' => $settings['timeSeparator']));

      return implode($summary, '<br />');
      
    case 'field_timer_jquery_countdown_led':
      $types = array(
        'auto' => t('Auto'),
        'timer' => t('Timer'),
        'countdown' => t('Countdown'),
      );
      $summary[] = t('Type: %type', array('%type' => $types[$settings['type']]));
      
      $summary[] = t('Display days: %display_days', array('%display_days' => $settings['display_days'] ? t('Yes') : t('No')));
      if ($settings['display_days']) {
        $options = array(
          1 => 9,
          2 => 99,
          3 => 999,
        );
        $summary[] = t('Maximum count of days: %max_count_of_days', array('%max_count_of_days' => $options[$settings['max_count_of_days']]));
      }
      
      $summary[] = t('Display hours: %display_hours', array('%display_hours' => $settings['display_hours'] ? t('Yes') : t('No')));
      $summary[] = t('Display minutes: %display_minutes', array('%display_minutes' => $settings['display_minutes'] ? t('Yes') : t('No')));
      $summary[] = t('Display seconds: %display_seconds', array('%display_seconds' => $settings['display_seconds'] ? t('Yes') : t('No')));
      
      return implode($summary, '<br />');
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_timer_field_formatter_settings_form($field, $instance, $view_mode,
        $form, $form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'field_timer_text':
      $settings_form['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array(
          'auto' => t('Auto'),
          'timer' => t('Timer'),
          'countdown' => t('Countdown'),
        ),
        '#default_value' => $settings['type'],
      );

      $settings_form['granularity'] = array(
        '#type' => 'select',
        '#title' => t('Granularity'),
        '#options' => range(0, 7),
        '#default_value' => $settings['granularity'],
      );

      return $settings_form;

    case 'field_timer_county':
      $settings_form['animation'] = array(
        '#type' => 'select',
        '#title' => t('Animation'),
        '#options' => array(
          'fade' => t('Fade'),
          'scroll' => t('Scroll'),
        ),
        '#default_value' => $settings['animation'],
      );

      $settings_form['speed'] = array(
        '#type' => 'textfield',
        '#title' => t('Speed'),
        '#default_value' => $settings['speed'],
      );

      $settings_form['theme'] = array(
        '#type' => 'select',
        '#title' => t('Theme'),
        '#options' => array(
          'black' => t('Black'),
          'gray' => t('Gray'),
          'red' => t('Red'),
          'blue' => t('Blue'),
        ),
        '#default_value' => $settings['theme'],
      );

      $settings_form['background'] = array(
        '#type' => 'textfield',
        '#title' => t('Background'),
        '#default_value' => $settings['background'],
        '#description' => t("Data from this field will be added to css property 'background'."),
      );

      $settings_form['reflection'] = array(
        '#type' => 'checkbox',
        '#title' => t('Add reflection'),
        '#default_value' => $settings['reflection'],
      );

      $settings_form['reflectionOpacity'] = array(
        '#type' => 'textfield',
        '#title' => t('Reflection opacity'),
        '#default_value' => $settings['reflectionOpacity'],
        '#description' => t('Float value between 0 and 1.'),
      );

      return $settings_form;

    case 'field_timer_jquery_countdown':
      $settings_form['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array(
          'auto' => t('Auto'),
          'timer' => t('Timer'),
          'countdown' => t('Countdown'),
        ),
        '#default_value' => $settings['type'],
      );

      $settings_form['regional'] = array(
        '#type' => 'select',
        '#title' => t('Region'),
        '#default_value' => $settings['regional'],
        '#options' => _field_timer_jquery_countdown_regions(),
      );

      $settings_form['format'] = array(
        '#type' => 'textfield',
        '#title' => t('Format'),
        '#default_value' => $settings['format'],
        '#description' => t("See !documentation for this parameter.", array('!documentation' => l(t('documentation'), 'http://keith-wood.name/countdownRef.html', array('fragment' => 'format')))),
      );

      $settings_form['layout'] = array(
        '#type' => 'textarea',
        '#rows' => 3,
        '#cols' => 60,
        '#title' => t('Layout'),
        '#defualt_value' => $settings['layout'],
        '#description' => t("See !documentation for this parameter.", array('!documentation' => l(t('documentation'), 'http://keith-wood.name/countdownRef.html', array('fragment' => 'layout')))),
      );

      $settings_form['compact'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display in compact format'),
        '#default_value' => $settings['compact'],
      );

      $settings_form['significant'] = array(
        '#type' => 'select',
        '#title' => t('Significant'),
        '#options' => range(0, 7),
        '#default_value' => $settings['significant'],
      );

      $settings_form['timeSeparator'] = array(
        '#type' => 'textfield',
        '#title' => t('Time separator'),
        '#default_value' => $settings['timeSeparator'],
      );

      return $settings_form;
      
    case 'field_timer_jquery_countdown_led':
      $settings_form['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array(
          'auto' => t('Auto'),
          'timer' => t('Timer'),
          'countdown' => t('Countdown'),
        ),
        '#default_value' => $settings['type'],
      );
      
      $settings_form['display_days'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display days'),
        '#default_value' => $settings['display_days'],
        '#attributes' => array('class' => array('field-timer-dislay-days')),
      );
      
      $settings_form['max_count_of_days'] = array(
        '#type' => 'select',
        '#title' => t('Max count of days'),
        '#options' => array(
          1 => 9,
          2 => 99,
          3 => 999,
        ),
        '#default_value' => $settings['max_count_of_days'],
        '#states' => array(
          'invisible' => array(
            'input.field-timer-dislay-days' => array('checked' => FALSE),
          ),
        ),
      );
      
      $settings_form['display_hours'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display hours'),
        '#default_value' => $settings['display_hours'],
      );
      
      $settings_form['display_minutes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display minutes'),
        '#default_value' => $settings['display_minutes'],
      );
      
      $settings_form['display_seconds'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display seconds'),
        '#default_value' => $settings['display_seconds'],
      );
      
      return $settings_form;
  }
}

/**
 * Implemtents hook_field_instance_settings_form().
 */
function field_timer_field_instance_settings_form($field, $instance) {
  $settings_form = array();
  $settings = $instance['settings'];
  foreach ($instance['display'] as $display) {
    if ($display['type'] == 'field_timer_jquery_countdown') {
      $settings_form['jquery-countdown'] = array(
        '#type' => 'fieldset',
        '#title' => t('jQuery Countdown options'),
        '#description' => t('This settings effect only on jQuery Countdown and jQuery Countdown LED formatters.'),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
      );
      $token_description = module_exists('token') ? '<br />' . t('This field supports tokens.') : '';
      $settings_form['jquery-countdown']['expiryUrl'] = array(
        '#type' => 'textfield',
        '#title' => t('Expiry URL'),
        '#default_value' => $settings['jquery-countdown']['expiryUrl'],
        '#description' => t('A URL to load when the countdown reaches zero, replacing the current page. !token_description', array('!token_desccription' => $token_description)),
      );
      $settings_form['jquery-countdown']['expiryText'] = array(
        '#type' => 'textarea',
        '#title' => t('Expiry text'),
        '#default_value' => $settings['jquery-countdown']['expiryText'],
        '#description' => t('A message to display when the countdown reaches zero, replacing the countdown periods. It may contain HTML markup. !token_description', array('!token_desccription' => $token_description)),
      );
      $settings_form['jquery-countdown']['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#default_value' => $settings['jquery-countdown']['description'],
        '#description' => t('The descriptive text shown below the countdown timer. This value can contain HTML markup. !token_description', array('!token_desccription' => $token_description)),
      );
      if (module_exists('token')) {
        $settings_form['jquery-countdown']['token'] = array(
          '#theme' => 'token_tree',
          '#token_types' => array($instance['entity_type']),
          '#global_types' => TRUE,
          '#click_insert' => FALSE,
        );
      }
      break;
    }
  }
  return $settings_form;
}

/**
 * Implements hook_field_timer_entity_properties().
 */
function field_timer_field_timer_entity_properties() {
  $properties = array(
    'node' => array(
      'created' => t('Node create date'),
      'changed' => t('Node last change date'),
    ),
    'comment' => array(
      'created' => t('Comment create date'),
      'changed' => t('Comment last change date'),
    ),
    'file' => array(
      'timestamp' => t('File upload date'),
    ),
    'taxanomy_term' => array(),
    'taxanomy_vocabulary' => array(),
    'user' => array(
      'created' => t('User create date'),
      'access' => t('User last access date'),
      'login' => t('User last login date'),
    ),
  );

  return $properties;
}

/**
 * Loads entity properties which represent a date.
 * 
 * @param string $entity_type
 *   Entity type machine name or empty string.
 * 
 * @return array 
 *   Returns an array of entity's properties which represent a date keyed by 
 * entity types if $entity_type is empty, array of properties of given entity 
 * type otherwise.
 */
function field_timer_entity_properties($entity_type = '') {
  $properties = module_invoke_all('field_timer_entity_properties');
  drupal_alter('field_timer_entity_properties', $properties);
  if (!empty($entity_type)) {
    return $properties[$entity_type];
  }
  return $properties;
}

/**
 * Help function. 
 * 
 * Get all available regions for jquery.countdown.
 */
function _field_timer_jquery_countdown_regions() {
  return array(
    'sq' => t('Albanian'),
    'ar' => t('Arabic'),
    'hy' => t('Armenian'),
    'bn' => t('Bengali/Bangla'),
    'bs' => t('Bosnian'),
    'bg' => t('Bulgarian'),
    'my' => t('Burmese'),
    'ca' => t('Catalan'),
    'zh-CN' => t('Chinese/Simplified'),
    'zh-TW' => t('Chinese/Traditional'),
    'hr' => t('Croatian'),
    'cs' => t('Czech'),
    'da' => t('Danish'),
    'nl' => t('Dutch'),
    'et' => t('Estonian'),
    'en' => t('English'),
    'fa' => t('Farsi/Persian'),
    'fi' => t('Finnish'),
    'fr' => t('French'),
    'gl' => t('Galician'),
    'de' => t('German'),
    'el' => t('Greek'),
    'gu' => t('Gujarati'),
    'he' => t('Hebrew'),
    'hu' => t('Hungarian'),
    'id' => t('Indonesian'),
    'it' => t('Italian'),
    'ja' => t('Japanese'),
    'kn' => t('Kannada'),
    'ko' => t('Korean'),
    'lv' => t('Latvian'),
    'lt' => t('Lithuanian'),
    'ml' => t('Malayalam'),
    'ms' => t('Malaysian'),
    'nb' => t('Norvegian'),
    'pl' => t('Polish'),
    'pt-BR' => t('Portuguese/Brazilian'),
    'ro' => t('Romanian'),
    'ru' => t('Russian'),
    'sr' => t('Serbian'),
    'sk' => t('Slovak'),
    'sl' => t('Slovenian'),
    'es' => t('Spanish'),
    'sv' => t('Swedish'),
    'th' => t('Thai'),
    'tr' => t('Turkish'),
    'uk' => t('Ukrainian'),
    'uz' => t('Uzbek'),
    'vi' => t('Vietnamese'),
    'cy' => t('Welsh'),
  );
}
