<?php

/**
 * Implements hook_field_info
 */
function field_timer_field_info() {
  return array (
      'field_timer' => array (
          'label' => t('Timer Field'),
          'description' => t('Timer or countdown'),
          'settings' => array (),
          'instance_settings' => array (),
          'default_widget' => 'field_timer_simple_date',
          'default_formatter' => 'field_timer_text'
      )
  );
}

/**
 * Implements hook_field_widget_info
 */
function field_timer_field_widget_info() {
  return array (
      'field_timer_simple_date' => array (
          'label' => t('Date Form'),
          'field types' => array ('field_timer'),
          'settings' => array (),
          'weight' => -1
      ),
      'field_timer_entity_property_select' => array (
          'label' => t('Entity Property (Select List)'),
          'description' => t('Allow set an entity\'s property value as the target date.'),
          'field types' => array ('field_timer'),
          'settings' => array (),
          'weight' => 0
      ),
      'field_timer_entity_property_radio' => array (
          'label' => t('Entity Property (Radio Buttons)'),
          'description' => t('Allow set an entity\'s property value as the target date.'),
          'field types' => array ('field_timer'),
          'settings' => array (),
          'weight' => 0
      )
  );
}

/**
 * Implements hook_field_widget_form
 */
function field_timer_field_widget_form(&$form, &$form_state, $field, $instance,
        $langcode, $items, $delta, $element) {
  
  switch ($instance['widget']['type']) {
    case 'field_timer_simple_date': {
      $widget = array (
          '#type' => 'date_popup',
          '#title' => $element['#title'],
          '#default_value' => isset($items[$delta]['timestamp']) ? 
                  date('Y-m-d H:i:s', $items[$delta]['timestamp']) : NULL
      );
      $element['timestamp'] = $widget;
      break;
    }
    
    case 'field_timer_entity_property_select': {
      $options = field_timer_entity_properties($instance['entity_type']);
      $widget = array (
          '#type' => 'select',
          '#options' => $options,
          '#multiple' => FALSE,
          '#title' => $element['#title'],
          '#default_value' => isset($items[$delta]['entity_property']) ?
                  $items[$delta]['entity_property'] : 0,
          '#description' => t('Choose an entity property which will be used as the target date.'),
          '#empty_value' => 0
      );
      $element['entity_property'] = $widget;
      break;
    }
    case 'field_timer_entity_property_radio': {
      $options = field_timer_entity_properties($instance['entity_type']);
      $widget = array (
          '#type' => 'radios',
          '#options' => $options,
          '#default_value' => isset($items[$delta]['entity_property']) ?
                  $items[$delta]['entity_property'] : 0,
          '#description' => t('Choose an entity property which will be used as the target date.')
      );
      $element['entity_property'] = $widget;
      $element['#type'] = 'fieldset';
    }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info
 */
function field_timer_field_formatter_info() {
  $formatters = array (
      'field_timer_text' => array (
          'label' => t('Text'),
          'description' => t('Simple text'),
          'field types' => array ('field_timer'),
          'settings' => array ()
      )
  );
  
  $path = libraries_get_path('jquery-countdown');
  if ($path && file_exists($path . '/assets/countdown/jquery.countdown.js')) {
    $formatters['field_timer_jquery_countdown'] = array (
        'label' => t('jQuery Countdown'),
        'description' => t('Use jQuery Countdown plugin.'),
        'field types' => array ('field_timer'),
        'settings' => array ()
    );
  }
  
  return $formatters;
}

/**
 * Implements hook_field_formatter_view
 */
function field_timer_field_formatter_view($entity_type, $entity, $field, $instance,
        $langcode, $items, $display) {
  
  $elements = array();
  switch ($display['type']) {
    case 'field_timer_text': {
        foreach ($items as $delta => $item) {
          $elements[$delta] = array (
              '#type' => 'markup',
              '#markup' => date(DATE_FORMAT_DATETIME, $item['timestamp'])
          );
        }
      break;
    }
    case 'field_timer_jquery_countdown': {
    }
  }
  return $elements;
}

/**
 * Implements hook_field_is_empty
 */
function field_timer_field_is_empty($item, $field) {
  if (empty($item['timestamp']) && empty ($item['entity_property']))
    return TRUE;
  return FALSE;
}

/**
 * Implements hook_field_presave
 */
function field_timer_field_presave($entity_type, $entity, $field, $instance,
        $langcode, &$items) {
  
  if ($field['type'] == 'field_timer') {
    foreach ($items as $delta => $item) {
      if (!empty($item['timestamp'])) {
        $timestamp = strtotime($item['timestamp']);
        if ($timestamp) {
          $items[$delta]['timestamp'] = $timestamp;
        }
      }
    }
  }
}

/**
 * Implements hook_field_timer_entity_properties
 * Define properties for default drupal entities
 */
function field_timer_field_timer_entity_properties() {
  $properties = array (
      'node' => array (
          'created' => t('Node create date'),
          'changed' => t('Node last change date')
      ),
      'comment' => array (
          'created' => t('Comment create date'),
          'changed' => t('Comment last change date')
      ),
      'file' => array (
          'timestamp' => t('File upload date')
      ),
      'taxanomy_term' => array(),
      'taxanomy_vocabulary' => array(),
      'user' => array (
          'created' => t('User create date'),
          'access' => t('User last access date'),
          'login' => t('User last login date')
      )
  );
  
  return $properties;
}

/**
 * Load entity properties which represent a date.
 * @param string $entity_type
 * @return array of entity's properties which represent a date keyed 
 * by entity types if $entity_type is empty, array of properties of given 
 * entity type otherwise.
 */
function field_timer_entity_properties($entity_type = '') {
  $properties = module_invoke_all('field_timer_entity_properties');
  if (!empty($entity_type)) {
    return $properties[$entity_type];
  }
  return $properties;
}